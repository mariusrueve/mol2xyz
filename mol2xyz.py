#!/usr/bin/env python3
"""
mol2xyz.py

A tool to convert an SDF file or a SMILES string into an XYZ file.
The script can be used as an importable library or as a command‐line tool.

Usage as CLI:
    # Using an SDF file that already contains 3D coordinates:
    $ python mol2xyz.py molecule.sdf output.xyz

    # Using a SMILES string (which will be converted to 3D) and not showing hydrogens:
    $ python mol2xyz.py "CCO" output.xyz --smiles

    # Using an SDF file and showing hydrogens in the final output:
    $ python mol2xyz.py molecule.sdf output.xyz --show-hs

Usage as a library:
    >>> from mol2xyz import molecule_from_smiles, molecule_from_sdf, write_xyz
    >>> mol = molecule_from_smiles("CCO")
    >>> write_xyz(mol, "output.xyz")
"""

import os

import click
from rdkit import Chem
from rdkit.Chem import AllChem


def molecule_from_sdf(file_path):
    """
    Load the first molecule from an SDF file.

    Parameters:
        file_path (str): Path to the SDF file.

    Returns:
        rdkit.Chem.Mol: The first valid molecule from the file.

    Raises:
        ValueError: If no valid molecule is found.
    """
    suppl = Chem.SDMolSupplier(file_path, removeHs=False)
    # Filter out any None objects
    mols = [mol for mol in suppl if mol is not None]
    if not mols:
        raise ValueError(f"No valid molecules found in {file_path}.")
    return mols[0]


def molecule_from_smiles(smiles):
    """
    Create a molecule from a SMILES string.
    The molecule is hydrogenated, embedded in 3D, and energy-minimized.

    Parameters:
        smiles (str): A SMILES string.

    Returns:
        rdkit.Chem.Mol: A molecule with a 3D conformation.

    Raises:
        ValueError: If the SMILES string is invalid.
    """
    mol = Chem.MolFromSmiles(smiles)
    if mol is None:
        raise ValueError("Invalid SMILES string provided.")
    mol = Chem.AddHs(mol)
    if AllChem.EmbedMolecule(mol) != 0:
        raise ValueError("Embedding the molecule failed.")
    AllChem.UFFOptimizeMolecule(mol)
    return mol


def ensure_3d(mol):
    """
    Ensure that the molecule has a 3D conformer.
    If not, add hydrogens, embed in 3D, and optimize.

    Parameters:
        mol (rdkit.Chem.Mol): The molecule to check.

    Returns:
        rdkit.Chem.Mol: A molecule with a 3D conformer.
    """
    if not mol.GetNumConformers():
        mol = Chem.AddHs(mol)
        if AllChem.EmbedMolecule(mol) != 0:
            raise ValueError("Embedding the molecule failed.")
        AllChem.UFFOptimizeMolecule(mol)
    return mol


def write_xyz(mol, output_path):
    """
    Write a molecule to an XYZ file.

    The XYZ file format:
        - First line: number of atoms.
        - Second line: a comment (here a simple note).
        - Subsequent lines: atomic symbol and x, y, z coordinates.

    Parameters:
        mol (rdkit.Chem.Mol): The molecule with a 3D conformer.
        output_path (str): Path where the XYZ file will be saved.
    """
    conf = mol.GetConformer()
    num_atoms = mol.GetNumAtoms()
    lines = [str(num_atoms), "Generated by mol2xyz.py"]
    for atom in mol.GetAtoms():
        pos = conf.GetAtomPosition(atom.GetIdx())
        symbol = atom.GetSymbol()
        lines.append(f"{symbol} {pos.x:.4f} {pos.y:.4f} {pos.z:.4f}")

    with open(output_path, "w") as f:
        f.write("\n".join(lines))


@click.command()
@click.argument("input_data", type=str)
@click.argument("output_file", type=click.Path(writable=True))
@click.option(
    "--smiles",
    is_flag=True,
    help="Interpret the input_data as a SMILES string instead of an SDF file.",
)
@click.option(
    "--show-hs",
    is_flag=True,
    default=False,
    help="Show hydrogens in the final XYZ file. (Default: hydrogens are removed.)",
)
def main(input_data, output_file, smiles, show_hs):
    """
    Convert an SDF file or a SMILES string into an XYZ file.

    INPUT_DATA: Either the path to an SDF file or a SMILES string.
    OUTPUT_FILE: The path to the resulting XYZ file.
    """
    try:
        if smiles:
            # Interpret the input as a SMILES string.
            mol = molecule_from_smiles(input_data)
        else:
            # Assume the input is an SDF file.
            if not os.path.exists(input_data):
                raise FileNotFoundError(f"File '{input_data}' does not exist.")
            mol = molecule_from_sdf(input_data)
            # Check if a 3D conformer exists; if not, generate one.
            mol = ensure_3d(mol)
    except Exception as e:
        click.echo(f"Error: {e}", err=True)
        raise click.Abort()

    # Remove hydrogens from the final output unless --show-hs is specified.
    if not show_hs:
        mol = Chem.RemoveHs(mol)

    try:
        write_xyz(mol, output_file)
    except Exception as e:
        click.echo(f"Failed to write XYZ file: {e}", err=True)
        raise click.Abort()

    click.echo(f"XYZ file successfully written to {output_file}")


if __name__ == "__main__":
    main()
